##Data type: String Methods Practice(format,find,rfind,count), (immutable and ordered)
  verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, don’t deal in lies,\nOr being hated, don’t give way to hating,\n  And yet don’t look too good, nor talk too wise:"
  print(verse, "\n")

  print("Verse has a length of {} characters.".format(len(verse)))
  print("The first occurence of the word 'and' occurs at the {}th index.".format(verse.find('and')))
  print("The last occurence of the word 'you' occurs at the {}th index.".format(verse.rfind('you')))
  print("The word 'you' occurs {} times in the verse.".format(verse.count('you')))

##Data structure: sets (container of unique elements of list), (mutable and unordered, cannot be sorted)
  #get unique elements from a list
  numbers = [1, 2, 6, 3, 1, 1, 6]
  unique_nums = set(numbers)
  print(unique_nums)
  out: {1, 2, 3, 6}
  
  #Sets method (add,pop)
  fruit = {"apple", "banana", "orange", "grapefruit"}  # define a set
  print("watermelon" in fruit)  # check for element
  fruit.add("watermelon")  # add an element
  print(fruit)
  print(fruit.pop())  # remove a random element
  print(fruit)
  out:
  False
  {'grapefruit', 'orange', 'watermelon', 'banana', 'apple'}
  grapefruit
  {'orange', 'watermelon', 'banana', 'apple'}

##Data structure: Dictionary(stores mappings of unique keys to values), (mutable,unordered) (only unmutable data types can be key)
  elements = {"hydrogen": 1, "helium": 2, "carbon": 6}
  print(elements["helium"])  # print the value mapped to "helium"
  elements["lithium"] = 3  # insert "lithium" with a value of 3 into the dictionary
  print("carbon" in elements)
  print(elements.get("dilithium")) #use .get() instead of elements['dilithium'] to check if a key is in the dic to avoid crash
  out:
  True
  None

  #Identity Operators
  is	evaluates if both sides have the same identity
  is not	evaluates if both sides have different identities
    n = elements.get("dilithium")
    print(n is None)
    print(n is not None)
    out:
    True
    False
  >>> elements.get('dilithium')
  None
  >>> elements['dilithium']
  KeyError: 'dilithium'
  >>> elements.get('kryptonite', 'There\'s no such element!')
  "There's no such element!"
  
  #other operations on dictionary, use verse_dict as an example
    verse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}
    print(verse_dict, '\n')

    # find number of unique keys in the dictionary
    num_keys = len(verse_dict)
    print(num_keys)

    # find whether 'breathe' is a key in the dictionary
    contains_breathe = "breathe" in verse_dict
    print(contains_breathe)

    # create and sort a list of the dictionary's keys
    sorted_keys = sorted(verse_dict.keys())

    # get the first element in the sorted list of keys
    print(sorted_keys[0])

    # find the element with the highest value in the list of keys
    print(sorted_keys[-1]) 
